[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "distutils.sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "test_utils",
        "description": "test_utils",
        "isExtraImport": true,
        "detail": "test_utils",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "session5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "session5",
        "description": "session5",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "importlib_load_entry_point",
        "kind": 2,
        "importPath": "epai.Scripts.mprof-script",
        "description": "epai.Scripts.mprof-script",
        "peekOfCode": "def importlib_load_entry_point(spec, group, name):\n    dist_name, _, _ = spec.partition('==')\n    matches = (\n        entry_point\n        for entry_point in distribution(dist_name).entry_points\n        if entry_point.group == group and entry_point.name == name\n    )\n    return next(matches).load()\nglobals().setdefault('load_entry_point', importlib_load_entry_point)\nif __name__ == '__main__':",
        "detail": "epai.Scripts.mprof-script",
        "documentation": {}
    },
    {
        "label": "__requires__",
        "kind": 5,
        "importPath": "epai.Scripts.mprof-script",
        "description": "epai.Scripts.mprof-script",
        "peekOfCode": "__requires__ = 'memory-profiler==0.58.0'\ntry:\n    from importlib.metadata import distribution\nexcept ImportError:\n    try:\n        from importlib_metadata import distribution\n    except ImportError:\n        from pkg_resources import load_entry_point\ndef importlib_load_entry_point(spec, group, name):\n    dist_name, _, _ = spec.partition('==')",
        "detail": "epai.Scripts.mprof-script",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror==5: # access denied - user not admin.\n                raise\n            if silent:",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = '_d' if '_d.pyd' in importlib.machinery.EXTENSION_SUFFIXES else ''\n    filename = \"%s%d%d%s.dll\" % \\\n               (modname, sys.version_info[0], sys.version_info[1], suffix)\n    filename = os.path.join(lib_dir, \"pywin32_system32\", filename)\n    loader = importlib.machinery.ExtensionFileLoader(modname, filename)\n    spec = importlib.machinery.ModuleSpec(name=modname, loader=loader, origin=filename)\n    mod = importlib.util.module_from_spec(spec)",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n        finally:\n            my_key.Close()\n    finally:",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register = 1):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags['quiet']=1\n    for module, klass_name in com_modules:",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True):\n    \"\"\" Add (or remove) Pythonwin to context menu for python scripts.\n        ??? Should probably also add Edit command for pys files also.\n        Also need to remove these keys on uninstall, but there's no function\n            like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    lib_dir = distutils.sysconfig.get_python_lib(plat_specific=1)\n    classes_root=get_root_hkey()\n    ## Installer executable doesn't seem to pass anything to postinstall script indicating if it's a debug build,",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey()==winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0,shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0,shellcon.CSIDL_SYSTEM)",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\"Path \\\"{}\\\" does not exist!\".format(location))\n    return location\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,\n                                     description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), 'pywin32_postinstall.log'), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nver_string = \"%d.%d\" % (sys.version_info[0], sys.version_info[1])\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + ver_string\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nver_string = \"%d.%d\" % (sys.version_info[0], sys.version_info[1])\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + ver_string\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "ver_string",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "ver_string = \"%d.%d\" % (sys.version_info[0], sys.version_info[1])\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + ver_string\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_postinstall",
        "description": "epai.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + ver_string\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "epai.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_testall",
        "description": "epai.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,\n                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    data = popen.communicate()[0]\n    if sys.version_info > (3,):\n        sys.stdout.write(data.decode('latin-1'))",
        "detail": "epai.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "epai.Scripts.pywin32_testall",
        "description": "epai.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, script, cmdline_rest=\"\"):\n    for maybe in possible_locations:\n        if os.path.isfile(os.path.join(maybe, script)):\n            run_test(os.path.abspath(os.path.join(maybe, script)), cmdline_rest)\n            break\n    else:\n        raise RuntimeError(\"Failed to locate the test script '%s' in one of %s\"\n                           % (script, possible_locations))\nif __name__ == '__main__':\n    import argparse",
        "detail": "epai.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_testall",
        "description": "epai.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [site.getusersitepackages(), ] + site.getsitepackages()\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error.\ndef run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,",
        "detail": "epai.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "epai.Scripts.pywin32_testall",
        "description": "epai.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages(), ] + site.getsitepackages()\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error.\ndef run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,\n                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)",
        "detail": "epai.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "create_deck_using_lambda_zip_map",
        "kind": 2,
        "importPath": "session5",
        "description": "session5",
        "peekOfCode": "def create_deck_using_lambda_zip_map(vals: 'face values as List[String]', suits: 'classes as List[String]') -> 'Deck as List[String]':\n    '''\n    creates a deck of cards\n    Input: \n        vals: ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n        suits: ['spades', 'clubs', 'hearts', 'diamonds']    \n        lists and not sets.  set orders the values\n    Return:\n        The deck in order (not sorted nor shuffled)\n    Note: ",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "create_deck_using_list_comprehension",
        "kind": 2,
        "importPath": "session5",
        "description": "session5",
        "peekOfCode": "def create_deck_using_list_comprehension(vals: 'face values as List[String]', suits: 'classes as List[String]') -> 'Deck as List[String]':\n    '''\n    creates a deck of cards\n    Input: \n        vals: ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n        suits: ['spades', 'clubs', 'hearts', 'diamonds']    \n        lists and not sets.  set orders the values\n    Return:\n        The deck in order (not sorted nor shuffled)\n    Note: ",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "deal",
        "kind": 2,
        "importPath": "session5",
        "description": "session5",
        "peekOfCode": "def deal(no_of_decks: int,no_of_players: int,no_of_cards: int)->'Dealt Cards for each player':\n    '''\n    deals the decks(depending on number of decks) to number of players and number of cards per player\n    Input: \n        no_of_decks: number of decks\n        no_of_players: number of players\n        no_of_cards: number of cards per player\n    process:\n        creates cards list based on number of decks, shuffle, distributes to players so as not to affect probability\n    Return:",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "decider",
        "kind": 2,
        "importPath": "session5",
        "description": "session5",
        "peekOfCode": "def decider(hand1: 'Dealt cards to Player 1 as List[String]',hand2: 'Dealt cards to Player 2 as List[String]')->'winner':\n    '''\n    Decides the winner\n    Input: \n        hand1: Cards with player 1\n        hand2: Cards with player 2\n    process:\n        Ranks the card combination with each of the player\n    Return:\n        hand, Winner depending on rank (lower the rank, the player is winner) and the reason",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "get_rank",
        "kind": 2,
        "importPath": "session5",
        "description": "session5",
        "peekOfCode": "def get_rank(hand: 'hand of cards with player as List[String]')->'Rank':\n    '''\n    Ranks the card combination\n    Input: \n        hand: Cards with player\n    process:\n        Ranks the card combination with each of the player\n        Ranking logic in order\n        if same suit, consecutive starting with ace, rank 1\n        if same suit, consecutive not starting with ace, rank 2",
        "detail": "session5",
        "documentation": {}
    },
    {
        "label": "test_readme_file_for_formatting",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_readme_file_for_formatting():\n    f = open(\"README.md\", \"r\", encoding=\"utf-8\")\n    content = f.read()\n    f.close()\n    assert content.count(\"#\") >= 5\ndef test_fourspace_equal():\n    assert fourspace(session) == False, 'Not all spaces before lines are a multiple of 4!'\ndef test_function_names():\n    assert function_name_had_cap_letter(session) == False, \"One of your function has a capitalized alphabet!\"\ndef test_readme_exists():",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_fourspace_equal",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_fourspace_equal():\n    assert fourspace(session) == False, 'Not all spaces before lines are a multiple of 4!'\ndef test_function_names():\n    assert function_name_had_cap_letter(session) == False, \"One of your function has a capitalized alphabet!\"\ndef test_readme_exists():\n    assert os.path.isfile(\"README.md\"), \"README.md file missing!\"\ndef test_readme_proper_description():\n    README_CONTENT_CHECK_FOR=[]\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_function_names",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_function_names():\n    assert function_name_had_cap_letter(session) == False, \"One of your function has a capitalized alphabet!\"\ndef test_readme_exists():\n    assert os.path.isfile(\"README.md\"), \"README.md file missing!\"\ndef test_readme_proper_description():\n    README_CONTENT_CHECK_FOR=[]\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:\n        README_CONTENT_CHECK_FOR.extend([function[0]])\n    READMELOOKSGOOD = True",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_readme_exists",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_readme_exists():\n    assert os.path.isfile(\"README.md\"), \"README.md file missing!\"\ndef test_readme_proper_description():\n    README_CONTENT_CHECK_FOR=[]\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:\n        README_CONTENT_CHECK_FOR.extend([function[0]])\n    READMELOOKSGOOD = True\n    f = open(\"README.md\", \"r\")\n    content = f.read()",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_readme_proper_description",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_readme_proper_description():\n    README_CONTENT_CHECK_FOR=[]\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:\n        README_CONTENT_CHECK_FOR.extend([function[0]])\n    READMELOOKSGOOD = True\n    f = open(\"README.md\", \"r\")\n    content = f.read()\n    f.close()\n    for c in README_CONTENT_CHECK_FOR:",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_readme_contents",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_readme_contents():\n    readme_words=[word for line in open('README.md', 'r', encoding=\"utf-8\") for word in line.split()]\n    assert len(readme_words) >= 100, \"Make your README.md file interesting! Add atleast 500 words\"\ndef test_function_name_had_cap_letter():\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:\n        assert len(re.findall('([A-Z])', function[0])) == 0, \"You have used Capital letter(s) in your function names\"\ndef test_create_deck_using_lambda_zip_map():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_function_name_had_cap_letter",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_function_name_had_cap_letter():\n    functions = inspect.getmembers(session, inspect.isfunction)\n    for function in functions:\n        assert len(re.findall('([A-Z])', function[0])) == 0, \"You have used Capital letter(s) in your function names\"\ndef test_create_deck_using_lambda_zip_map():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    assert(session.create_deck_using_lambda_zip_map(vals,suits)==output), 'Not Expected output.  Please validate logic'        \ndef test_create_deck_using_list_comprehension():",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_lambda_zip_map",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_lambda_zip_map():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    assert(session.create_deck_using_lambda_zip_map(vals,suits)==output), 'Not Expected output.  Please validate logic'        \ndef test_create_deck_using_list_comprehension():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    assert(session.create_deck_using_list_comprehension(vals,suits)==output), 'Not Expected output.  Please validate logic'            ",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_list_comprehension",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_list_comprehension():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    assert(session.create_deck_using_list_comprehension(vals,suits)==output), 'Not Expected output.  Please validate logic'            \ndef test_create_deck_using_lambda_zip_map_performance():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    start1 = time.perf_counter()",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_lambda_zip_map_performance",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_lambda_zip_map_performance():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    start1 = time.perf_counter()\n    session.create_deck_using_lambda_zip_map(vals,suits)\n    end1 = time.perf_counter()\n    delta1 = end1 - start1\n    assert delta1 < 0.01, 'It is taking too much time to create_deck_using_lambda_zip_map'\ndef test_create_deck_using_list_comprehension_performance():",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_list_comprehension_performance",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_list_comprehension_performance():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    start1 = time.perf_counter()\n    session.create_deck_using_list_comprehension(vals,suits)\n    end1 = time.perf_counter()\n    delta1 = end1 - start1\n    assert delta1 < 0.01, 'It is taking too much time to create_deck_using_list_comprehension'\ndef test_deal_performance():",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_deal_performance",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_deal_performance():\n    start1 = time.perf_counter()\n    session.deal(1,2,5)\n    end1 = time.perf_counter()\n    delta1 = end1 - start1\n    assert delta1 < 0.01, 'It is taking too much time to create_deck_using_list_comprehension'\ndef test_deal_for_more_than_2_sets_performance():\n    start1 = time.perf_counter()\n    session.deal(3,2,5)\n    end1 = time.perf_counter()",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_deal_for_more_than_2_sets_performance",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_deal_for_more_than_2_sets_performance():\n    start1 = time.perf_counter()\n    session.deal(3,2,5)\n    end1 = time.perf_counter()\n    delta1 = end1 - start1\n    assert delta1 < 0.01, 'It is taking too much time to create_deck_using_list_comprehension'\ndef test_create_deck_using_list_comprehension_exception():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    with pytest.raises(ValueError):",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_list_comprehension_exception",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_list_comprehension_exception():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    with pytest.raises(ValueError):\n        assert session.create_deck_using_list_comprehension(vals,[])\n        assert session.create_deck_using_list_comprehension([],suits)\n        assert session.create_deck_using_list_comprehension([],[])\ndef test_create_deck_using_lambda_zip_map_exception():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_create_deck_using_lambda_zip_map_exception",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_create_deck_using_lambda_zip_map_exception():\n    output=['spades-2', 'spades-3', 'spades-4', 'spades-5', 'spades-6', 'spades-7', 'spades-8', 'spades-9', 'spades-10', 'spades-jack', 'spades-queen', 'spades-king', 'spades-ace', 'clubs-2', 'clubs-3', 'clubs-4', 'clubs-5', 'clubs-6', 'clubs-7', 'clubs-8', 'clubs-9', 'clubs-10', 'clubs-jack', 'clubs-queen', 'clubs-king', 'clubs-ace', 'hearts-2', 'hearts-3', 'hearts-4', 'hearts-5', 'hearts-6', 'hearts-7', 'hearts-8', 'hearts-9', 'hearts-10', 'hearts-jack', 'hearts-queen', 'hearts-king', 'hearts-ace', 'diamonds-2', 'diamonds-3', 'diamonds-4', 'diamonds-5', 'diamonds-6', 'diamonds-7', 'diamonds-8', 'diamonds-9', 'diamonds-10', 'diamonds-jack', 'diamonds-queen', 'diamonds-king', 'diamonds-ace']\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    with pytest.raises(ValueError):\n        assert session.create_deck_using_lambda_zip_map(vals,[])\n        assert session.create_deck_using_lambda_zip_map([],suits)\n        assert session.create_deck_using_lambda_zip_map([],[])\ndef test_deal_exception():\n    with pytest.raises(ValueError):\n        assert session.deal(2,0,5)",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_deal_exception",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_deal_exception():\n    with pytest.raises(ValueError):\n        assert session.deal(2,0,5)\n        assert session.deal(2,2,1)\n        assert session.deal(-1,2,5)\ndef test_decider_exception():\n    with pytest.raises(ValueError):\n        assert session.decider(['hearts-7', 'hearts-10', 'hearts-8', 'hearts-9', 'hearts-6'],[])\n        assert session.decider([],['hearts-7', 'hearts-10', 'hearts-8', 'hearts-9', 'hearts-6'])\n        assert session.decider([],[])",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_decider_exception",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_decider_exception():\n    with pytest.raises(ValueError):\n        assert session.decider(['hearts-7', 'hearts-10', 'hearts-8', 'hearts-9', 'hearts-6'],[])\n        assert session.decider([],['hearts-7', 'hearts-10', 'hearts-8', 'hearts-9', 'hearts-6'])\n        assert session.decider([],[])\ndef test_get_rank_exception():\n    with pytest.raises(ValueError):\n        assert session.get_rank([])\ndef test_performance_decider():\n    start1 = time.perf_counter()",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_get_rank_exception",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_get_rank_exception():\n    with pytest.raises(ValueError):\n        assert session.get_rank([])\ndef test_performance_decider():\n    start1 = time.perf_counter()\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    n=5\n    combination={1:'Royal Flush', 2:'Straight Flush', 3:'Four of a Kind', 4:'Full House', 5:'Flush', 6:'Straight', 7:'Three of a Kind', 8:'Two Pair', 9:'One Pair', 10:'High Card'}\n    for times in range(200):",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_performance_decider",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_performance_decider():\n    start1 = time.perf_counter()\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    n=5\n    combination={1:'Royal Flush', 2:'Straight Flush', 3:'Four of a Kind', 4:'Full House', 5:'Flush', 6:'Straight', 7:'Three of a Kind', 8:'Two Pair', 9:'One Pair', 10:'High Card'}\n    for times in range(200):\n        combinations=[\n                        [i+'-'+j for i,j in list(zip([random.choice(suits)] * n, vals[-n:]))], #1\n                        [i+'-'+j for i,j in list(zip([random.choice(suits)] * n, vals[random.choice(range(len(vals)-(n+1))):][:n]))], #2",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "test_decider",
        "kind": 2,
        "importPath": "test_session5",
        "description": "test_session5",
        "peekOfCode": "def test_decider():\n    vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n    suits = ['spades', 'clubs', 'hearts', 'diamonds']\n    n=5\n    combination={1:'Royal Flush', 2:'Straight Flush', 3:'Four of a Kind', 4:'Full House', 5:'Flush', 6:'Straight', 7:'Three of a Kind', 8:'Two Pair', 9:'One Pair', 10:'High Card'}\n    for times in range(200):\n        combinations=[\n                        [i+'-'+j for i,j in list(zip([random.choice(suits)] * n, vals[-n:]))], #1\n                        [i+'-'+j for i,j in list(zip([random.choice(suits)] * n, vals[random.choice(range(len(vals)-(n+1))):][:n]))], #2\n                        [item for sublist in [[m+'-'+j for m in random.sample(suits,n-1)] if i==0 else [m+'-'+j for m in random.sample(suits,1)] for i,j in enumerate(random.sample(vals,2))] for item in sublist], #3",
        "detail": "test_session5",
        "documentation": {}
    },
    {
        "label": "fourspace",
        "kind": 2,
        "importPath": "test_utils",
        "description": "test_utils",
        "peekOfCode": "def fourspace(module_name):\n    r''' Returns pass if used four spaces for each level of syntactically \\\n    significant indenting.'''\n    lines = inspect.getsource(module_name)\n    spaces = re.findall('\\n(.+?)[a-zA-Z0-9]', lines)\n    for space in spaces:\n        if len(space) % 4 > 0 and len(space) != 1: #1 in case new fn or cls start after \\n\n            print(space)\n            return True\n    return False",
        "detail": "test_utils",
        "documentation": {}
    },
    {
        "label": "function_name_had_cap_letter",
        "kind": 2,
        "importPath": "test_utils",
        "description": "test_utils",
        "peekOfCode": "def function_name_had_cap_letter(module_name):\n    functions = inspect.getmembers(module_name, inspect.isfunction)\n    for function in functions:\n        t = re.findall('([A-Z])', function[0])\n        if t:\n            return True\n    return False",
        "detail": "test_utils",
        "documentation": {}
    }
]